name: CI

on:
  push:
    branches:
      - master
    tag: 
      - '[vV][0-9]+.[0-9]+.[0-9]+'
  pull_request:

env:
  RUST_BACKTRACE: 1
  CRATE_NAME: sfz

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt
        override: true
        profile: minimal
    - uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: -- --check

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
          toolchain: stable
        - os: ubuntu-latest
          target: x86_64-unknown-linux-musl
          toolchain: stable
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
          toolchain: nightly
        - os: macos-latest
          target: x86_64-apple-darwin
          toolchain: stable
        - os: windows-latest
          target: x86_64-pc-windows-msvc
          toolchain: stable
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.toolchain }}
        target: ${{ matrix.target }}
        override: true
        profile: minimal
    - name: Test
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --target=${{ matrix.target }}

  coverage:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
    - uses: actions-rs/cargo@v1
      with:
        command: clean
    - uses: actions-rs/cargo@v1
      with:
        command: test
        args: --no-fail-fast
      env:
        CARGO_INCREMENTAL: '0'
        RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort'
        RUSTDOCFLAGS: '-Cpanic=abort' # Though we are not using rustdoc...
    - uses: actions-rs/grcov@v0.1
      id: coverage
    - uses: codecov/codecov-action@v1
      with:
        file: ${{ steps.coverage.outputs.report }}
        fail_ci_if_error: false

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
        - os: ubuntu-latest
          target: x86_64-unknown-linux-musl
        - os: macos-latest
          target: x86_64-apple-darwin
        - os: windows-latest
          target: x86_64-pc-windows-msvc
    steps:
    - name: Initialize workflow variables
      id: vars
      shell: bash
      run: |
        unset REF_TAG ; case ${GITHUB_REF} in refs/tags/*) REF_TAG=${GITHUB_REF#refs/tags/} ;; esac;
        unset DEPLOY ; if [[ $REF_TAG =~ ^[vV][0-9]+\.[0-9]+\.[0-9]+ ]]; then RELEASE='true' ; fi
        EXE_SUFFIX=
        PKG_SUFFIX=".tar.gz" ; 
        case ${{ matrix.os }} in windows-*) EXE_SUFFIX=".exe" PKG_suffix=".zip" ;; esac;
        unset PKG_NAME ; PKG_NAME="${{ env.CRATE_NAME }}-${{ steps.vars.outputs.REF_TAG }}-${{ matrix.target }}${PKG_SUFFIX}"

        echo ::set-output name=REF_TAG::${REF_TAG}
        echo ::set-output name=RELEASE::${RELEASE}
        echo ::set-output name=ARCHIVE_DIR::__archive__
        echo ::set-output name=EXE_SUFFIX::${EXE_SUFFIX}
        echo ::set-output name=PKG_NAME::${PKG_NAME}
    - name: Exit if not a semantic tag
      if: ${{ !steps.vars.outputs.RELEASE }}
      run: exit 1
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        profile: minimal
    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target=${{ matrix.target }}
    - name: Package
      shell: bash
      run: |
        cp "target/${{ matrix.target }}/release/${{ env.CRATE_NAME }}${{ steps.vars.outputs.EXE_SUFFIX }}" "${{ steps.vars.outpus.ARCHIVE_DIR }}/"

        case ${{ matrix.os }} in 
          windows-*) ;;
          *) strip "${{ steps.vars.outpus.ARCHIVE_DIR }}/${{ env.CRATE_NAME }}" ;;
        esac;

        pushd "${{ steps.vars.outpus.ARCHIVE_DIR }}/" > /dev/null
        case ${{ matrix.os }} in
          windows-*) 7z -y a '${{ steps.vars.outputs.PKG_NAME }}' * | tail -2 ;;
          *) tar czf '${{ steps.vars.outputs.PKG_NAME }}' * ;;
        esac;
        popd > /dev/null
    - name: Publish to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ steps.vars.outputs.ARCHIVE_DIR }}/${{ steps.vars.outputs.PKG_NAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
